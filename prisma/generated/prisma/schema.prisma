generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chef      Chef?
  orders    Order[]
}

model Chef {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  menus     Menu[]
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id         String     @id @default(uuid())
  chefId     String
  chef       Chef       @relation(fields: [chefId], references: [id])
  menuItems  MenuItem[]
  weekOfYear Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model MenuItem {
  id          String       @id @default(uuid())
  menuId      String
  menu        Menu         @relation(fields: [menuId], references: [id])
  name        String
  description String?
  ingredients Ingredient[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Ingredient {
  id                  String               @id @default(uuid())
  menuItemId          String
  menuItem            MenuItem             @relation(fields: [menuItemId], references: [id])
  name                String
  description         String?
  supplierIngredients SupplierIngredient[]
  orderItems          OrderItem[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Supplier {
  id                  String               @id @default(uuid())
  name                String
  locations           SupplierLocation[]
  supplierIngredients SupplierIngredient[]
  reviews             Review[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Location {
  id                 String               @id @default(uuid())
  city               String
  country            String
  suppliers          SupplierLocation[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  SupplierIngredient SupplierIngredient[]
}

model SupplierLocation {
  supplierId String
  locationId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@id([supplierId, locationId])
}

model SupplierIngredient {
  supplierId   String
  ingredientId String
  locationId   String
  supplier     Supplier   @relation(fields: [supplierId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  location     Location   @relation(fields: [locationId], references: [id])

  @@id([supplierId, ingredientId, locationId])
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  date       DateTime
  status     OrderStatus
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id           String     @id @default(uuid())
  orderId      String
  ingredientId String
  order        Order      @relation(fields: [orderId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Review {
  id         String   @id @default(uuid())
  chefId     String
  supplierId String
  chef       Chef     @relation(fields: [chefId], references: [id])
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum UserRole {
  ADMIN
  CHEF
  USER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}
